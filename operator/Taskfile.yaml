version: '3'

env:
  AWS_ACCOUNT_ID: "406477933661"
  AWS_REGION: "us-east-1"

vars:
  IMG_NAME: "news-operator"
  IMG_TAG: "v1"
  KUBECTL: "kubectl"
  LOCALBIN: "$(pwd)/bin"
  CONTROLLER_GEN: "{{.LOCALBIN}}/controller-gen"
  KUSTOMIZE: "{{.LOCALBIN}}/kustomize"
  KUSTOMIZE_VERSION: "v5.4.2"
  CONTROLLER_TOOLS_VERSION: "v0.15.0"
  IGNORE_NOT_FOUND: "false"
  REGISTRY: "ayeremenko"


tasks:

  aws-auth-docker:
    desc: "Authenticate Docker with AWS ECR"
    cmds:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  manifests:
    desc: "Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects."
    cmd: '{{.CONTROLLER_GEN}} rbac:roleName=manager-role crd webhook paths=./... output:crd:artifacts:config=config/crd/bases'

  generate:
    desc: "Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations."
    cmd: '{{.CONTROLLER_GEN}} object:headerFile="hack/boilerplate.go.txt" paths="./..."'

  fmt:
    desc: "Run go fmt against code."
    cmd: go fmt ./...

  vet:
    desc: "Run go vet against code."
    cmd: go vet ./...

  test:
    desc: "Run tests"
    cmd: go test ./.../...

  build:
    desc: "Build manager binary."
    cmd: go build -o bin/manager cmd/main.go

  run:
    desc: "Run a controller from your host."
    cmd: go run ./cmd/main.go

  operator-build:
    desc: "Build docker image with the manager."
    cmd: docker build -t {{.IMG_NAME}}:{{.IMG_TAG}} .

  docker-push:
    desc: "Push the Docker image to the registry"
    cmd: |
      docker tag {{.IMG_NAME}}:{{.IMG_TAG}} {{.REGISTRY}}/{{.IMG_NAME}}:{{.IMG_TAG}}
      docker push {{.REGISTRY}}/{{.IMG_NAME}}:{{.IMG_TAG}}

  operator-push-aws:
    desc: "Push the Docker image to AWS ECR"
    deps:
      - aws-auth-docker
      - operator-build
    cmd: |
        docker tag {{.IMG_NAME}}:{{.IMG_TAG}} {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_REGION}}.amazonaws.com/{{.IMG_NAME}}:{{.IMG_TAG}}
        docker push {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_REGION}}.amazonaws.com/{{.IMG_NAME}}:{{.IMG_TAG}}

  install:
    desc: "Install CRDs into the K8s cluster specified in ~/.kube/config."
    cmd: |
      {{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} apply -f -

  uninstall:
    desc: "Uninstall CRDs from the K8s cluster specified in ~/.kube/config."
    cmd: |
      {{.KUSTOMIZE}} build config/crd | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -

  deploy:
    desc: "Deploy controller to the K8s cluster specified in ~/.kube/config."
    cmd: |
      KUSTOMIZE=$(pwd)/bin/kustomize
      cd config/manager && $KUSTOMIZE edit set image controller={{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_REGION}}.amazonaws.com/{{.IMG_NAME}}:{{.IMG_TAG}}
      cd - 
      $KUSTOMIZE build config/default | {{.KUBECTL}} apply -f -

  undeploy:
    desc: "Undeploy controller from the K8s cluster specified in ~/.kube/config."
    cmd: |
      {{.KUSTOMIZE}} build config/default | {{.KUBECTL}} delete --ignore-not-found={{.IGNORE_NOT_FOUND}} -f -

  redeploy:
    desc: "Redeploy the controller to the K8s cluster specified in ~/.kube/config."
    deps:
      - undeploy
      - operator-build
      - docker-push
      - deploy