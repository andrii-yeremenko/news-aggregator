name: Go Build, Test, and Coverage

on:
  pull_request:
    branches-ignore:
      - 'docbook/**'
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '30 5 * * 2,4'
  workflow_dispatch:
  workflow_call:
    inputs:
      skipTests:
        description: 'Skip tests if needed'
        default: false
        required: false
        type: boolean

concurrency:
  group: ${{ github.event.pull_request.number }}-Go-Build-Test-Coverage
  cancel-in-progress: false
  
jobs:
  run:
    if: github.event_name != 'pull_request' || !contains(github.event.pull_request.labels.*.name, 'docbook')
    name: Go Build, Test, and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Verify Go installation
        run: go version

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          
      - name: Install dependencies
        run: task download

      - name: Tidy Go module dependencies
        run: task tidy

      - name: Format Go files
        run: task fmt

      - name: Check for unformatted files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Unformatted files detected. Please run 'task fmt' and commit the changes.";
            git diff;
            exit 1;
          fi

      - name: Run tests with coverage
        run: task test

      - name: Build
        run: task build-all
