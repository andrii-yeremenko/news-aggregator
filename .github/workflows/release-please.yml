name: release-please

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4

      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug Print Docker Tag
        run: |
          echo "Major version: ${{ needs.release-please.outputs.major }}"
          echo "Minor version: ${{ needs.release-please.outputs.minor }}"
          echo "Patch version: ${{ needs.release-please.outputs.patch }}"
          IMAGE_TAG="v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }}.${{ needs.release-please.outputs.patch }}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
      - name: Build and push Docker image
        env:
          MAJOR_VERSION: ${{ needs.release-please.outputs.major }}
          MINOR_VERSION: ${{ needs.release-please.outputs.minor }}
          PATCH_VERSION: ${{ needs.release-please.outputs.patch }}
        run: |
          if [ -z "$MAJOR_VERSION" ] || [ -z "$MINOR_VERSION" ] || [ -z "$PATCH_VERSION" ]; then
            echo "Error: One or more version components are empty"
            exit 1
          fi
          IMAGE_TAG="v${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
          # Validate Docker tag format
          if [[ ! "$IMAGE_TAG" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "Error: Invalid Docker tag format: ${IMAGE_TAG}"
            exit 1
          fi
          echo "Building Docker image with tag: ${IMAGE_TAG}"
          docker build -t ${{ secrets.DOCKER_USERNAME }}/news-aggregator:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKER_USERNAME }}/news-aggregator:${IMAGE_TAG}
