// Code generated by MockGen. DO NOT EDIT.
// Source: resource_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	resource "news-aggregator/aggregator/model/resource"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// AvailableFeeds mocks base method.
func (m *MockResourceManager) AvailableFeeds() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableFeeds")
	ret0, _ := ret[0].(string)
	return ret0
}

// AvailableFeeds indicates an expected call of AvailableFeeds.
func (mr *MockResourceManagerMockRecorder) AvailableFeeds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableFeeds", reflect.TypeOf((*MockResourceManager)(nil).AvailableFeeds))
}

// AvailableSources mocks base method.
func (m *MockResourceManager) AvailableSources() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableSources")
	ret0, _ := ret[0].(string)
	return ret0
}

// AvailableSources indicates an expected call of AvailableSources.
func (mr *MockResourceManagerMockRecorder) AvailableSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableSources", reflect.TypeOf((*MockResourceManager)(nil).AvailableSources))
}

// DeleteSource mocks base method.
func (m *MockResourceManager) DeleteSource(name resource.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSource", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSource indicates an expected call of DeleteSource.
func (mr *MockResourceManagerMockRecorder) DeleteSource(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSource", reflect.TypeOf((*MockResourceManager)(nil).DeleteSource), name)
}

// GetAllResources mocks base method.
func (m *MockResourceManager) GetAllResources() ([]resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResources")
	ret0, _ := ret[0].([]resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResources indicates an expected call of GetAllResources.
func (mr *MockResourceManagerMockRecorder) GetAllResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResources", reflect.TypeOf((*MockResourceManager)(nil).GetAllResources))
}

// GetSelectedResources mocks base method.
func (m *MockResourceManager) GetSelectedResources(sourceNames []string) ([]resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedResources", sourceNames)
	ret0, _ := ret[0].([]resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedResources indicates an expected call of GetSelectedResources.
func (mr *MockResourceManagerMockRecorder) GetSelectedResources(sourceNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedResources", reflect.TypeOf((*MockResourceManager)(nil).GetSelectedResources), sourceNames)
}

// IsSourceSupported mocks base method.
func (m *MockResourceManager) IsSourceSupported(source resource.Source) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSourceSupported", source)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSourceSupported indicates an expected call of IsSourceSupported.
func (mr *MockResourceManagerMockRecorder) IsSourceSupported(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSourceSupported", reflect.TypeOf((*MockResourceManager)(nil).IsSourceSupported), source)
}

// RegisterSource mocks base method.
func (m *MockResourceManager) RegisterSource(name resource.Source, url string, format resource.Format) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSource", name, url, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSource indicates an expected call of RegisterSource.
func (mr *MockResourceManagerMockRecorder) RegisterSource(name, url, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSource", reflect.TypeOf((*MockResourceManager)(nil).RegisterSource), name, url, format)
}

// UpdateResource mocks base method.
func (m *MockResourceManager) UpdateResource(source resource.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockResourceManagerMockRecorder) UpdateResource(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourceManager)(nil).UpdateResource), source)
}

// UpdateSource mocks base method.
func (m *MockResourceManager) UpdateSource(name resource.Source, url string, format resource.Format) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSource", name, url, format)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSource indicates an expected call of UpdateSource.
func (mr *MockResourceManagerMockRecorder) UpdateSource(name, url, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSource", reflect.TypeOf((*MockResourceManager)(nil).UpdateSource), name, url, format)
}
