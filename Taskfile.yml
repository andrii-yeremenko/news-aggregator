version: '3'

env:
  SERVER_PATH: "./cmd/web_server/main"
  CLI_PATH: "./cmd/cli/main"
  DOCKER_IMAGE_NAME: "ayeremenko/news-aggregator"
  DOCKERFILE_PATH: "Dockerfile"
  SERVER_EXPOSE_PORT: "8443"
  DOCKER_RUN_PORT: "443"
  DOCKER_TAG: "1.0.0"
  K8S_TEMPLATES_PATH: "./templates"
  LOCAL_PORT: "8888"
  SERVICE_PORT: "80"

output:
  group:
    begin: '::group::{{.TASK}}'
    end: '::endgroup::'

includes:
  web_server:
    taskfile: ./cmd/web_server/Taskfile.yml
  cli:
    taskfile: ./cmd/cli/Taskfile.yml

tasks:
  download:
    desc: "Download all dependencies"
    cmd: |
      go mod download

  tidy:
    desc: "Tidies the Go module dependencies"
    cmd: |
      go mod tidy

  generate:
    desc: Generate all mocks
    cmds:
      - go install github.com/golang/mock/mockgen@v1.6.0
      - go generate ./...

  test:
    desc: "Run all tests"
    deps:
      - generate
    cmd: |
      go test ./...

  fmt:
    desc: "Run go fmt on all Go files"
    cmd: |
      go fmt ./...

  vet:
    desc: "Run go vet on all Go files"
    cmd: |
      go vet ./...

  lint:
    desc: "Run golangci-lint"
    cmd: |
      golangci-lint run

  run-quality-checks:
    desc: "Run all quality checks"
    deps:
      - fmt
      - vet
      - lint

  build-all:
    desc: "Build all binaries"
    cmds:
      - task web_server:build
      - task cli:build

  docker-build:
    desc: "Build the Docker image for web_server"
    silent: true
    deps:
      - test
    cmd: |
      docker build -t $DOCKER_IMAGE_NAME:$DOCKER_TAG -f $DOCKERFILE_PATH .

  docker-run:
    desc: "Run the web_server Docker container"
    deps:
      - docker-build
    cmd: |
      docker run -p $DOCKER_RUN_PORT:$SERVER_EXPOSE_PORT $DOCKER_IMAGE_NAME

  docker-push:
    desc: "Push the Docker image to the registry"
    deps:
      - docker-build
    cmd: |
      docker push ayeremenko/news-aggregator:$DOCKER_TAG

  clean:
    desc: Clean build artifacts and remove all 'mocks' directories
    cmds:
      - task web_server:clean
      - task cli:clean
      - find . -type d -name mocks -exec rm -rf {} +

  create-namespace:
    desc: "Create the news-aggregator namespace"
    cmds:
      - kubectl apply -f $K8S_TEMPLATES_PATH/namespace.yaml
      - echo "The news-aggregator namespace has been created"

  delete-namespace:
    desc: "Delete the news-aggregator namespace"
    cmds:
      - kubectl delete -f $K8S_TEMPLATES_PATH/namespace.yaml
      - echo "The news-aggregator namespace has been deleted"

  create-volumes:
    desc: "Create PersistentVolume and PersistentVolumeClaim resources"
    deps:
      - create-namespace
    cmds:
      - kubectl apply -f $K8S_TEMPLATES_PATH/persistent-volume-resources.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/persistent-volume-config.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/persistent-volume-claim-resources.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/persistent-volume-claim-config.yaml
      - echo "PersistentVolume and PersistentVolumeClaim resources have been created"

  delete-volumes:
    desc: "Delete PersistentVolume and PersistentVolumeClaim resources"
    cmds:
      - kubectl delete -f $K8S_TEMPLATES_PATH/persistent-volume-claim-config.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/persistent-volume-claim-resources.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/persistent-volume-config.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/persistent-volume-resources.yaml -n news-aggregator-namespace
      - echo "PersistentVolume and PersistentVolumeClaim resources have been deleted"

  deploy:
    desc: "Deploy the news-aggregator app on the Kubernetes cluster"
    cmds:
      - kubectl apply -f $K8S_TEMPLATES_PATH/namespace.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/serviceaccount.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/role.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/rolebinding.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/deployment.yaml
      - kubectl apply -f $K8S_TEMPLATES_PATH/service.yaml
      - echo "The news-aggregator app has been deployed"

  undeploy:
    desc: "Remove the news-aggregator app from the Kubernetes cluster"
    cmds:
      - kubectl delete -f $K8S_TEMPLATES_PATH/service.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/deployment.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/rolebinding.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/role.yaml -n news-aggregator-namespace
      - kubectl delete -f $K8S_TEMPLATES_PATH/serviceaccount.yaml -n news-aggregator-namespace
      - echo "The news-aggregator app has been removed from the Kubernetes cluster"

  port-forward:
    desc: "Port-forward to access the news-aggregator app"
    cmds:
      - kubectl port-forward service/news-aggregator $LOCAL_PORT:$SERVICE_PORT -n news-aggregator-namespace > port-forward.log 2>&1 &
      - echo "Port forwarding started on localhost:$LOCAL_PORT. Check port-forward.log for details."

  port-remove:
    desc: "Stop port-forwarding for the news-aggregator app"
    cmds:
      - pkill -f 'kubectl port-forward'
      - rm port-forward.log
      - echo "Stopped port-forwarding."